import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:cloud_functions/cloud_functions.dart';
import 'package:flutter/foundation.dart';

/// Enumera√ß√£o dos tipos de notifica√ß√£o
enum TipoNotificacao {
  novaSolicitacao('nova_solicitacao', 'Nova solicita√ß√£o de aluguel'),
  solicitacaoAprovada('solicitacao_aprovada', 'Solicita√ß√£o aprovada'),
  solicitacaoRecusada('solicitacao_recusada', 'Solicita√ß√£o recusada'),
  pagamentoPendente('pagamento_pendente', 'Pagamento pendente'),
  pagamentoConfirmado('pagamento_confirmado', 'Pagamento confirmado'),
  aluguelIniciado('aluguel_iniciado', 'Aluguel iniciado'),
  lembreteDevolucao('lembrete_devolucao', 'Lembrete de devolu√ß√£o'),
  devolucaoSolicitada('devolucao_solicitada', 'Devolu√ß√£o solicitada'),
  devolucaoAprovada('devolucao_aprovada', 'Devolu√ß√£o aprovada'),
  avaliacaoPendente('avaliacao_pendente', 'Avalia√ß√£o pendente'),
  mensagemChat('mensagem_chat', 'Nova mensagem'),
  aprovacaoResidencia('aprovacao_residencia', 'Verifica√ß√£o de resid√™ncia aprovada'),
  rejeicaoResidencia('rejeicao_residencia', 'Verifica√ß√£o de resid√™ncia rejeitada'),
  aprovacaoConta('aprovacao_conta', 'Conta aprovada');

  final String value;
  final String label;
  const TipoNotificacao(this.value, this.label);
}

/// Gerenciador de notifica√ß√µes do sistema
class NotificationManager {
  final FirebaseFirestore _firestore;
  final FirebaseFunctions _functions;

  NotificationManager({
    FirebaseFirestore? firestore,
    FirebaseFunctions? functions,
  })  : _firestore = firestore ?? FirebaseFirestore.instance,
        _functions = functions ?? FirebaseFunctions.instance;

  /// Envia notifica√ß√£o quando uma nova solicita√ß√£o √© criada
  Future<void> notificarNovaSolicitacao({
    required String locadorId,
    required String locatarioNome,
    required String itemNome,
    required String aluguelId,
  }) async {
    try {
      await _enviarNotificacao(
        destinatarioId: locadorId,
        tipo: TipoNotificacao.novaSolicitacao,
        titulo: 'Nova Solicita√ß√£o de Aluguel',
        mensagem: '$locatarioNome solicitou alugar seu item "$itemNome"',
        dados: {
          'aluguelId': aluguelId,
          'tipo': TipoNotificacao.novaSolicitacao.value,
          'rota': '/status-aluguel/$aluguelId',
        },
      );
    } catch (e) {
      debugPrint('‚ùå Erro ao enviar notifica√ß√£o de nova solicita√ß√£o: $e');
    }
  }

  /// Envia notifica√ß√£o quando uma solicita√ß√£o √© aprovada
  Future<void> notificarSolicitacaoAprovada({
    required String locatarioId,
    required String locadorNome,
    required String itemNome,
    required String aluguelId,
  }) async {
    try {
      await _enviarNotificacao(
        destinatarioId: locatarioId,
        tipo: TipoNotificacao.solicitacaoAprovada,
        titulo: 'Solicita√ß√£o Aprovada! üéâ',
        mensagem: '$locadorNome aprovou sua solicita√ß√£o para "$itemNome"',
        dados: {
          'aluguelId': aluguelId,
          'tipo': TipoNotificacao.solicitacaoAprovada.value,
          'rota': '/status-aluguel/$aluguelId',
        },
      );
      debugPrint('‚úÖ Notifica√ß√£o de solicita√ß√£o aprovada enviada para $locatarioId');
    } catch (e) {
      debugPrint('‚ùå Erro ao enviar notifica√ß√£o de solicita√ß√£o aprovada: $e');
    }
  }

  /// Envia notifica√ß√£o quando uma solicita√ß√£o √© recusada
  Future<void> notificarSolicitacaoRecusada({
    required String locatarioId,
    required String locadorNome,
    required String itemNome,
    required String aluguelId,
    String? motivo,
  }) async {
    try {
      final mensagem = motivo != null
          ? '$locadorNome recusou sua solicita√ß√£o para "$itemNome". Motivo: $motivo'
          : '$locadorNome recusou sua solicita√ß√£o para "$itemNome"';

      await _enviarNotificacao(
        destinatarioId: locatarioId,
        tipo: TipoNotificacao.solicitacaoRecusada,
        titulo: 'Solicita√ß√£o Recusada',
        mensagem: mensagem,
        dados: {
          'aluguelId': aluguelId,
          'tipo': TipoNotificacao.solicitacaoRecusada.value,
          'rota': '/status-aluguel/$aluguelId',
        },
      );
      debugPrint('‚úÖ Notifica√ß√£o de solicita√ß√£o recusada enviada para $locatarioId');
    } catch (e) {
      debugPrint('‚ùå Erro ao enviar notifica√ß√£o de solicita√ß√£o recusada: $e');
    }
  }

  /// Envia notifica√ß√£o quando um pagamento est√° pendente
  Future<void> notificarPagamentoPendente({
    required String locatarioId,
    required String itemNome,
    required String aluguelId,
    required double valor,
  }) async {
    try {
      await _enviarNotificacao(
        destinatarioId: locatarioId,
        tipo: TipoNotificacao.pagamentoPendente,
        titulo: 'Pagamento Pendente',
        mensagem: 'Complete o pagamento de R\$ ${valor.toStringAsFixed(2)} para "$itemNome"',
        dados: {
          'aluguelId': aluguelId,
          'tipo': TipoNotificacao.pagamentoPendente.value,
          'rota': '/status-aluguel/$aluguelId',
        },
      );
      debugPrint('‚úÖ Notifica√ß√£o de pagamento pendente enviada para $locatarioId');
    } catch (e) {
      debugPrint('‚ùå Erro ao enviar notifica√ß√£o de pagamento pendente: $e');
    }
  }

  /// Envia notifica√ß√£o quando o pagamento √© confirmado
  Future<void> notificarPagamentoConfirmado({
    required String locadorId,
    required String locatarioId,
    required String itemNome,
    required String aluguelId,
  }) async {
    try {
      // Notificar o locador
      await _enviarNotificacao(
        destinatarioId: locadorId,
        tipo: TipoNotificacao.pagamentoConfirmado,
        titulo: 'Pagamento Confirmado! üí∞',
        mensagem: 'Pagamento recebido para o aluguel de "$itemNome"',
        dados: {
          'aluguelId': aluguelId,
          'tipo': TipoNotificacao.pagamentoConfirmado.value,
          'rota': '/status-aluguel/$aluguelId',
        },
      );

      // Notificar o locat√°rio
      await _enviarNotificacao(
        destinatarioId: locatarioId,
        tipo: TipoNotificacao.pagamentoConfirmado,
        titulo: 'Pagamento Confirmado! ‚úÖ',
        mensagem: 'Seu pagamento para "$itemNome" foi confirmado',
        dados: {
          'aluguelId': aluguelId,
          'tipo': TipoNotificacao.pagamentoConfirmado.value,
          'rota': '/status-aluguel/$aluguelId',
        },
      );
      debugPrint('‚úÖ Notifica√ß√µes de pagamento confirmado enviadas');
    } catch (e) {
      debugPrint('‚ùå Erro ao enviar notifica√ß√£o de pagamento confirmado: $e');
    }
  }

  /// Envia notifica√ß√£o de lembrete de devolu√ß√£o
  Future<void> notificarLembreteDevolucao({
    required String locatarioId,
    required String itemNome,
    required String aluguelId,
    required DateTime dataFim,
  }) async {
    try {
      final diasRestantes = dataFim.difference(DateTime.now()).inDays;
      final mensagem = diasRestantes == 0
          ? 'O prazo de devolu√ß√£o de "$itemNome" termina hoje!'
          : 'Faltam $diasRestantes dias para devolver "$itemNome"';

      await _enviarNotificacao(
        destinatarioId: locatarioId,
        tipo: TipoNotificacao.lembreteDevolucao,
        titulo: 'Lembrete de Devolu√ß√£o',
        mensagem: mensagem,
        dados: {
          'aluguelId': aluguelId,
          'tipo': TipoNotificacao.lembreteDevolucao.value,
          'rota': '/status-aluguel/$aluguelId',
        },
      );
      debugPrint('‚úÖ Notifica√ß√£o de lembrete de devolu√ß√£o enviada para $locatarioId');
    } catch (e) {
      debugPrint('‚ùå Erro ao enviar notifica√ß√£o de lembrete de devolu√ß√£o: $e');
    }
  }

  /// Envia notifica√ß√£o quando a devolu√ß√£o √© solicitada
  Future<void> notificarDevolucaoSolicitada({
    required String locadorId,
    required String locatarioNome,
    required String itemNome,
    required String aluguelId,
  }) async {
    try {
      await _enviarNotificacao(
        destinatarioId: locadorId,
        tipo: TipoNotificacao.devolucaoSolicitada,
        titulo: 'Devolu√ß√£o Solicitada',
        mensagem: '$locatarioNome solicitou a devolu√ß√£o de "$itemNome"',
        dados: {
          'aluguelId': aluguelId,
          'tipo': TipoNotificacao.devolucaoSolicitada.value,
          'rota': '/status-aluguel/$aluguelId',
        },
      );
      debugPrint('‚úÖ Notifica√ß√£o de devolu√ß√£o solicitada enviada para $locadorId');
    } catch (e) {
      debugPrint('‚ùå Erro ao enviar notifica√ß√£o de devolu√ß√£o solicitada: $e');
    }
  }

  /// Envia notifica√ß√£o quando a devolu√ß√£o √© aprovada
  Future<void> notificarDevolucaoAprovada({
    required String locatarioId,
    required String itemNome,
    required String aluguelId,
  }) async {
    try {
      await _enviarNotificacao(
        destinatarioId: locatarioId,
        tipo: TipoNotificacao.devolucaoAprovada,
        titulo: 'Devolu√ß√£o Aprovada! ‚úÖ',
        mensagem: 'A devolu√ß√£o de "$itemNome" foi aprovada',
        dados: {
          'aluguelId': aluguelId,
          'tipo': TipoNotificacao.devolucaoAprovada.value,
          'rota': '/status-aluguel/$aluguelId',
        },
      );
      debugPrint('‚úÖ Notifica√ß√£o de devolu√ß√£o aprovada enviada para $locatarioId');
    } catch (e) {
      debugPrint('‚ùå Erro ao enviar notifica√ß√£o de devolu√ß√£o aprovada: $e');
    }
  }

  /// Envia notifica√ß√£o de avalia√ß√£o pendente
  Future<void> notificarAvaliacaoPendente({
    required String usuarioId,
    required String avaliadoNome,
    required String itemNome,
    required String aluguelId,
  }) async {
    try {
      await _enviarNotificacao(
        destinatarioId: usuarioId,
        tipo: TipoNotificacao.avaliacaoPendente,
        titulo: 'Avalia√ß√£o Pendente ‚≠ê',
        mensagem: 'Avalie sua experi√™ncia com $avaliadoNome e "$itemNome"',
        dados: {
          'aluguelId': aluguelId,
          'tipo': TipoNotificacao.avaliacaoPendente.value,
          'rota': '/avaliacoes-pendentes',
        },
      );
      debugPrint('‚úÖ Notifica√ß√£o de avalia√ß√£o pendente enviada para $usuarioId');
    } catch (e) {
      debugPrint('‚ùå Erro ao enviar notifica√ß√£o de avalia√ß√£o pendente: $e');
    }
  }

  /// M√©todo privado para enviar notifica√ß√£o
  Future<void> _enviarNotificacao({
    required String destinatarioId,
    required TipoNotificacao tipo,
    required String titulo,
    required String mensagem,
    required Map<String, dynamic> dados,
  }) async {
    try {
      // 1. Sempre salvar notifica√ß√£o no Firestore (para hist√≥rico)
      await _salvarNotificacaoFirestore(
        destinatarioId: destinatarioId,
        tipo: tipo,
        titulo: titulo,
        mensagem: mensagem,
        dados: dados,
      );

      // 2. Buscar o FCM token do destinat√°rio
      final userDoc = await _firestore.collection('usuarios').doc(destinatarioId).get();

      if (!userDoc.exists) {
        debugPrint('‚ö†Ô∏è Usu√°rio $destinatarioId n√£o encontrado');
        return;
      }

      final fcmToken = userDoc.data()?['fcmToken'] as String?;

      if (fcmToken == null) {
        debugPrint('‚ö†Ô∏è FCM Token n√£o encontrado para usu√°rio $destinatarioId');
        return;
      }

      // 3. Tentar enviar push notification via Cloud Function
      try {
        final result = await _functions.httpsCallable('enviarNotificacao').call({
          'token': fcmToken,
          'titulo': titulo,
          'mensagem': mensagem,
          'dados': dados,
        });

        debugPrint('‚úÖ Notifica√ß√£o push enviada com sucesso: ${result.data}');
      } catch (e) {
        debugPrint('‚ö†Ô∏è Falha ao enviar push notification, mas notifica√ß√£o salva no Firestore: $e');
        // N√£o √© erro cr√≠tico pois a notifica√ß√£o j√° foi salva no Firestore
      }
    } catch (e) {
      debugPrint('‚ùå Erro ao processar notifica√ß√£o: $e');
      rethrow;
    }
  }

  /// Salva a notifica√ß√£o no Firestore (sempre, para manter hist√≥rico)
  Future<void> _salvarNotificacaoFirestore({
    required String destinatarioId,
    required TipoNotificacao tipo,
    required String titulo,
    required String mensagem,
    required Map<String, dynamic> dados,
  }) async {
    try {
      await _firestore.collection('notificacoes').add({
        'destinatarioId': destinatarioId,
        'tipo': tipo.value,
        'titulo': titulo,
        'mensagem': mensagem,
        'dados': dados,
        'lida': false,
        'dataCriacao': FieldValue.serverTimestamp(),
      });
      debugPrint('‚úÖ Notifica√ß√£o salva no Firestore para hist√≥rico');
    } catch (e) {
      debugPrint('‚ùå Erro ao salvar notifica√ß√£o no Firestore: $e');
    }
  }
}
